# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: edabackenddaii
service: eventify-eda-be

provider:
  name: aws
  runtime: python3.10
  region: us-east-1
  profile: aws-academy
  stage: dev
  role: arn:aws:iam::747661705570:role/LabRole
  #vpc:
  #  securityGroupIds:
  #    - Ref: PublicSecurityGroup
  #  subnetIds:
  #    - Ref: PrivateSubnet1
  #    - Ref: PrivateSubnet2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource: "arn:aws:execute-api:us-east-1:*:*/*/*/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
      Resource:
        - arn:aws:dynamodb:us-east-1:*:table/ConnectionsTable
    # - Effect: Allow
    #   Action:
    #     - lambda:InvokeFunction
    #   Resource: arn:aws:lambda:us-east-1:747661705570:function:eventify-eda-be-dev-testHandler
    #   Condition:
    #     ArnLike:
    #       AWS:SourceArn: arn:aws:events:us-east-1:747661705570:rule/eventify-eda-be-dev-testHandler-rule-1"
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource:
        - arn:aws:events:us-east-1:747661705570:event-bus/default

# Incluir solo estos archivos, necesario para reducir el tamano del zip
package:
  patterns:
    - '!**'
    - api/app.py
    - api/websocket.py
    - handler.py
    - save_url.py

functions:
  testHandler:
    name: TestHandlerLambdaFunction 
    handler: handler.lambda_handler
    package:
      individually: true
    events:
      - eventBridge:
          eventBus: default
          pattern:
            source:
              - myapp

  websocketConnect:
    handler: api.websocket.connect
    events:
      - websocket:
          route: $connect

  websocketDisconnect:
    handler: api.websocket.disconnect
    events:
      - websocket:
          route: $disconnect

  websocketDefault:
    handler: api.websocket.default
    events:
      - websocket:
          route: $default

  restApi:
    handler: api.app.handler
    package:
      individually: true
    events:
      - http:
          path: /
          method: get

  saveWebsocketUrl:
    handler: save_url.lambda_handler
    package:
      individually: true
    timeout: 60

resources:
  Resources:
    # MyVPC:
    #   Type: AWS::EC2::VPC
    #   Properties:
    #     CidrBlock: 10.0.0.0/16
    #     EnableDnsSupport: true
    #     EnableDnsHostnames: true

    # InternetGateway:
    #   Type: AWS::EC2::InternetGateway

    # AttachGateway:
    #   Type: AWS::EC2::VPCGatewayAttachment
    #   Properties:
    #     VpcId:
    #       Ref: MyVPC
    #     InternetGatewayId:
    #       Ref: InternetGateway

    # PublicSubnet1:
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId:
    #       Ref: MyVPC
    #     CidrBlock: 10.0.1.0/24
    #     MapPublicIpOnLaunch: true
    #     AvailabilityZone: us-east-1a

    # PublicSubnet2:
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId:
    #       Ref: MyVPC
    #     CidrBlock: 10.0.2.0/24
    #     MapPublicIpOnLaunch: true
    #     AvailabilityZone: us-east-1b

    # PrivateSubnet1:
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId:
    #       Ref: MyVPC
    #     CidrBlock: 10.0.3.0/24
    #     MapPublicIpOnLaunch: false
    #     AvailabilityZone: us-east-1a

    # PrivateSubnet2:
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId:
    #       Ref: MyVPC
    #     CidrBlock: 10.0.4.0/24
    #     MapPublicIpOnLaunch: false
    #     AvailabilityZone: us-east-1b

    # NatGatewayEIP:
    #   Type: AWS::EC2::EIP
    #   DependsOn: AttachGateway
    #   Properties:
    #     Domain: vpc

    # NatGateway:
    #   Type: AWS::EC2::NatGateway
    #   Properties:
    #     AllocationId:
    #       Fn::GetAtt:
    #         - NatGatewayEIP
    #         - AllocationId
    #     SubnetId:
    #       Ref: PublicSubnet1

    # PrivateRouteTable1:
    #   Type: AWS::EC2::RouteTable
    #   Properties:
    #     VpcId:
    #       Ref: MyVPC

    # PrivateRouteTable2:
    #   Type: AWS::EC2::RouteTable
    #   Properties:
    #     VpcId:
    #       Ref: MyVPC

    # PrivateRoute1:
    #   Type: AWS::EC2::Route
    #   Properties:
    #     RouteTableId:
    #       Ref: PrivateRouteTable1
    #     DestinationCidrBlock: 0.0.0.0/0
    #     NatGatewayId:
    #       Ref: NatGateway

    # PrivateRoute2:
    #   Type: AWS::EC2::Route
    #   Properties:
    #     RouteTableId:
    #       Ref: PrivateRouteTable2
    #     DestinationCidrBlock: 0.0.0.0/0
    #     NatGatewayId:
    #       Ref: NatGateway

    # SubnetRouteTableAssociationPrivate1:
    #   Type: AWS::EC2::SubnetRouteTableAssociation
    #   Properties:
    #     SubnetId:
    #       Ref: PrivateSubnet1
    #     RouteTableId:
    #       Ref: PrivateRouteTable1

    # SubnetRouteTableAssociationPrivate2:
    #   Type: AWS::EC2::SubnetRouteTableAssociation
    #   Properties:
    #     SubnetId:
    #       Ref: PrivateSubnet2
    #     RouteTableId:
    #       Ref: PrivateRouteTable2

    # PublicRouteTable:
    #   Type: AWS::EC2::RouteTable
    #   Properties:
    #     VpcId:
    #       Ref: MyVPC

    # PublicRoute:
    #   Type: AWS::EC2::Route
    #   Properties:
    #     RouteTableId:
    #       Ref: PublicRouteTable
    #     DestinationCidrBlock: 0.0.0.0/0
    #     GatewayId:
    #       Ref: InternetGateway

    # SubnetRouteTableAssociationPublic1:
    #   Type: AWS::EC2::SubnetRouteTableAssociation
    #   Properties:
    #     SubnetId:
    #       Ref: PublicSubnet1
    #     RouteTableId:
    #       Ref: PublicRouteTable

    # SubnetRouteTableAssociationPublic2:
    #   Type: AWS::EC2::SubnetRouteTableAssociation
    #   Properties:
    #     SubnetId:
    #       Ref: PublicSubnet2
    #     RouteTableId:
    #       Ref: PublicRouteTable

    # PublicSecurityGroup:
    #   Type: AWS::EC2::SecurityGroup
    #   Properties:
    #     GroupDescription: Allow all inbound traffic
    #     VpcId:
    #       Ref: MyVPC
    #     SecurityGroupIngress:
    #       - IpProtocol: -1
    #         CidrIp: 0.0.0.0/0
    #     SecurityGroupEgress:
    #       - IpProtocol: -1
    #         CidrIp: 0.0.0.0/0

    TestHandlerEventPermission:
      Type: AWS::Lambda::Permission
      Properties: 
        FunctionName: 
          Ref: TestHandlerLambdaFunction 
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: arn:aws:events:us-east-1:747661705570:rule/eventify-eda-be-dev-testHandler-rule-1

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ConnectionsTable
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-python-requirements
  - serverless-scriptable-plugin

custom:
  pythonRequirements:
    dockerizePip: non-linux
    useDownloadCache: true
    useStaticCache: true

  scriptHooks:
    after:deploy:finalize: 'aws lambda invoke --function-name eventify-eda-be-dev-saveWebsocketUrl --log-type Tail --profile aws-academy outfile.txt'